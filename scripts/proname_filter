#!/bin/bash

echo -ne "\n**************************************************************************************************************\n"
echo -ne "* You are executing the \033[1mproname_filter\033[0m script, which is the second part of the \033[1mPRONAME\033[0m pipeline.             *\n"
echo -ne "*                                                                                                            *  \n"
echo -ne "* Please \033[31m\033[1mdo not\033[0m move, rename or remove files and folders generated by PRONAME until the end of the pipeline. *\n"
echo -ne "**************************************************************************************************************\n\n"

# Help menu

Help()
{

## Display Help
   echo -ne "\nThe proname_filter script is the second part of the PRONAME pipeline and allows quality-filtering Nanopore metabarcoding data coming from proname_import. \nIt also includes the counting of high-quality simplex reads and/or duplex reads (if applicable), and the creation of Length vs Quality scatter plots."
   echo
   echo -ne "\nSyntax: proname_filter [--datatype|--filtminlen|--filtmaxlen|--filtminqual|--inputpath|--threads|--deletefiles|--nocounting|--plotformat|--noscatterplot|--version|--help]"
   echo
   echo "Options:"
   echo -ne "\t--datatype\tIndicate whether you want to work with simplex reads, duplex reads or both. [Option: \"simplex\", \"duplex\" or \"both\"]\n"
   echo
   echo -ne "\t--filtminlen\tReads with a length below this threshold will be discarded during quality filtering. [Option: integer]\n"
   echo
   echo -ne "\t--filtmaxlen\tReads with a length above this threshold will be discarded during quality filtering. [Option: integer]\n"
   echo
   echo -ne "\t--filtminqual\tReads with a quality score below this threshold will be discarded during quality filtering. [Option: integer]\n"
   echo
   echo -ne "\t--inputpath\tPath to the folder containing raw fastq files. This must be the same path than the one provided while running proname_import.\n"
   echo -ne "\t\t\tTo prevent file conflicts and ensure accurate sequence counting, your raw FASTQ files must be stored in a separate directory (e.g., /data/RawData). \n"
   echo -ne "\t\t\tDo not place them directly in your working directory, as this is where proname_import writes all its output files. \n"
   echo -ne "\t\t\tMixing input and output files in the same location can lead to errors and unreliable results.\n"
   echo
   echo -ne "\t--threads\tNumber of threads to use. You can know the number of available threads on your computer by running the command 'nproc --all' [Default: 2]\n"
   echo
   echo -ne "\t--deletefiles\tDelete all non-essential files, i.e. files generated with proname_import that are no more needed for the rest of \n"
   echo -ne "\t\t\tthe analysis through PRONAME. [Option: \"yes\" or \"no\", Default: no] \n"
   echo
   echo -ne "\t--nocounting\tWhen this argument is set to \"yes\", counting of HQ simplex/duplex reads is not performed. \n"
   echo -ne "\t\t\t[Options: \"yes\" or \"no\", Default: \"no\"]\n"
   echo
   echo -ne "\t--plotformat\tFormat of the scatterplot visualization file produced. It can be either \"png\" or \"html\".  \n"
   echo -ne "\t\t\tSince NanoPlot produces an empty png plot for an unknown reason, it is only used to generate html visualizations. \n"
   echo -ne "\t\t\tpng plots are produced using the custom script scaleq.py. [Default: \"png\"] \n"
   echo
   echo -ne "\t--noscatterplot\tWhen this argument is set to 'yes', no length vs. quality scatterplot is generated. Since this is a time-consuming step, \n"
   echo -ne "\t\t\tthis possiblity has been made available to increase the flexibility of the pipeline. However, it is strongly discouraged to skip \n"
   echo -ne "\t\t\tthis scatterplot generation. Visual inspection of these plots is crucial for deciding which type of read to work with \n"
   echo -ne "\t\t\t(duplex and/or simplex) and which length and quality thresholds to apply. [Options: \"yes\" or \"no\", Default: \"no\"]\n"
   echo
   echo -ne "\t--version\tPrint the version of the pipeline.\n"
   echo
   echo -ne "\t--help\t\tPrint this help."
   echo


## Usage example
   echo -ne "\nUsage example:"
   echo -ne "\n-------------"
   echo
   echo "proname_filter \\"
   echo "  --datatype duplex \\"
   echo "  --filtminlen 3500 \\"
   echo "  --filtmaxlen 5000 \\"
   echo "  --filtminqual 15 \\"
   echo "  --inputpath RawData"
   echo
}

Version()
{
    echo -ne "proname_filter from the PRONAME pipeline, version 2.1.1\n\n"
}

# Variable default values
num_threads="2"
delete_non_essential="no"
no_scatterplot="no"
no_counting="no"
plot_format="png"

# Transform long options to short ones

for arg in "$@"; do
  shift
  case "$arg" in
    '--help')            set -- "$@" '-h'   ;;
    '--version')         set -- "$@" '-v'   ;;
    '--datatype')        set -- "$@" '-a'   ;;
    '--filtminlen')      set -- "$@" '-b'   ;;
    '--filtmaxlen')      set -- "$@" '-c'   ;;
    '--filtminqual')     set -- "$@" '-d'   ;;
    '--inputpath')       set -- "$@" '-e'   ;;
    '--threads')         set -- "$@" '-f'   ;;
    '--deletefiles')     set -- "$@" '-r'   ;;
    '--noscatterplot')   set -- "$@" '-i'   ;;
    '--nocounting')      set -- "$@" '-j'   ;;
    '--plotformat')      set -- "$@" '-k'   ;;
    *)                   set -- "$@" "$arg" ;;
  esac
done


# Parse short options

while getopts :hva:b:c:d:e:f:r:i:j:k: flag
do
    case "${flag}" in
        h) Help
        exit;;
        v) Version
        exit;;
        a) data_type=${OPTARG};;
        b) filt_min_length=${OPTARG};;
        c) filt_max_length=${OPTARG};;
        d) filt_min_quality=${OPTARG};;
        e) fastq_folder=${OPTARG};;
        f) num_threads=${OPTARG};;
        r) delete_non_essential=${OPTARG};;
        i) no_scatterplot=${OPTARG};;
        j) no_counting=${OPTARG};;
        k) plot_format=${OPTARG};;
        \?) # Invalid option
                echo -ne "Error: Invalid option\n"
                echo -ne "Please consult the help menu with 'proname_filter --help'\n"
                exit;;
    esac
done


# Mandatory arguments

if [ ! "$data_type" ] || [ ! "$filt_min_length" ] || [ ! "$filt_max_length" ] || [ ! "$filt_min_quality" ] || [ ! "$fastq_folder" ]; then
  echo -ne "\n\033[31m\033[1mError: arguments --datatype, --filtminlen, --filtmaxlen, --filtminqual and --inputpath must be provided\033[0m\n\n"
  echo -ne "Please consult the help menu with 'proname_filter --help'\n"
  exit;
fi

if [[ "$plot_format" != "png" && "$plot_format" != "html" ]]
then
   echo -ne "\n\033[31m\033[1mError: the value of the --plotformat argument must be 'png' or 'html'.\033[0m\n\n"
   echo -ne "Please consult the help menu with 'proname_filter --help'\n"
   exit 1
fi

######################################################

# Storing in variables the path of files from proname_import

if [ -e "reads_duplex.fastq" ]
then
  duplex_fastq="reads_duplex.fastq"
fi

if [ -e "reads_simplex.fastq" ]
then
  simplex_fastq="reads_simplex.fastq"
fi

if [ -e "reads_simplex_duplex.fastq" ]
then
  simplex_duplex_fastq="reads_simplex_duplex.fastq"
fi


# Listing the sequence identifiers present in each fastq file

if [ ! -d "Rawseqids" ]
then
   echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;38;5;39mRecording read distribution in each sample...\033[0m\n"

   mkdir Rawseqids

   for sample in $(ls ${fastq_folder} | awk -F '.fastq' '{print $1}')
   do
      awk 'NR == 1 || (NR-1) % 4 == 0' ${fastq_folder}/${sample}.fastq | sed 's/^@//' | awk '{
         if (match($0, /[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}([;][0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?/)) {
            print substr($0, RSTART, RLENGTH)
         }
      }' > Rawseqids/rawseqids_${sample}
   done

   echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;32mRead distribution recorded! \033[0m\n"
fi


###############
# Duplex data #
###############

if [ ${data_type} = "duplex" ]
then
   # Quality-filtering reads

   echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;38;5;39mFiltering reads according quality parameters provided...\033[0m\n"

   mkdir HQ

   cat ${duplex_fastq} | NanoFilt \
     --length ${filt_min_length} \
     --maxlength ${filt_max_length} \
     --quality ${filt_min_quality} > HQ/HQ_duplex_seqs.fastq

   if [ -e "HQ/HQ_duplex_seqs.fastq" ]
   then
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;32mQuality filtering completed! \033[0m\n"
   else
      echo -ne "\n\033[31m\033[1mError: Quality-filtering failed. \033[0m\n\n"
      echo -ne "Please consult the help menu.\n"
      exit;
   fi

   if [ "$no_counting" != "yes" ]
   then
      # Counting duplex reads
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;38;5;39mCounting the number of high-quality duplex reads in the dataset...\033[0m\n"

      seqkit seq -n HQ/HQ_duplex_seqs.fastq | awk '{
         if (match($0, /[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}([;][0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?/)) {
            print substr($0, RSTART, RLENGTH)
         }
      }' | sort > HQ_duplex_read_ids_sorted.txt

      echo -e "Sample_name\tHQ_duplex_reads" > HQ_duplex_read_distribution.tsv

      parallel -j ${num_threads} '
         sort Rawseqids/rawseqids_{} | comm -12 - HQ_duplex_read_ids_sorted.txt | wc -l | \
         awk -v sample={} "{print sample\"\t\"\$1}"
      ' ::: $(ls ${fastq_folder} | sed 's/\.fastq$//') >> HQ_duplex_read_distribution.tsv

      rm HQ_duplex_read_ids_sorted.txt

      nhqduplex=$(awk 'NR == 1 || (NR-1) % 4 == 0' HQ/HQ_duplex_seqs.fastq | wc -l)

      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;32mCounting completed! \033[0m\n\n"
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : There are ${nhqduplex} high-quality duplex reads in the dataset. Here is their distribution in each sample:\n\n$(cat HQ_duplex_read_distribution.tsv)\n\nThese results have been saved as \e[34mHQ_duplex_read_distribution.tsv\e[0m\n\n"
   fi

   # Visualization of data quality
   if [ "$no_scatterplot" != "yes" ]
   then
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;38;5;39mCreating Length vs Quality scatter plots...\033[0m\n"

      if [ ${plot_format} = "png" ]
      then
         scaleq.py \
            --fastq HQ/HQ_duplex_seqs.fastq
         mv length_vs_quality_plot.png LengthvsQualityScatterPlot_HQ_duplex.png

      elif [ ${plot_format} = "html" ]
      then
         NanoPlot \
            -t ${num_threads} \
            --fastq HQ/HQ_duplex_seqs.fastq \
            -o NanoPlot_visualizations_HQ
         cp NanoPlot_visualizations_HQ/LengthvsQualityScatterPlot_dot.html LengthvsQualityScatterPlot_HQ_duplex.html
         rm -r NanoPlot_visualizations_HQ
      fi

      if [ -e "LengthvsQualityScatterPlot_HQ_duplex.${plot_format}" ]
      then
         echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;32mScatter plot saved as\033[0m \e[34mLengthvsQualityScatterPlot_HQ_duplex.${plot_format}\e[0m\n\n"
         echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : The next script of the pipeline to use is \033[1mproname_refine\033[0m.\n\n"
         echo -ne "\nUsage example:"
         echo -ne "\n-------------"
         echo
         echo "proname_refine \\"
         echo "  --clusterid 0.90 \\"
         echo "  --inputpath RawData \\"
         echo "  --medakamodel r1041_e82_400bps_sup_v4.2.0 \\"
         echo "  --chimeradb /opt/db/rEGEN-B/rEGEN-B_sequences.fasta \\"
         echo "  --qiime2import yes"
         echo
      else
         echo -ne "\n\033[31m\033[1mError: plotting failed. \033[0m\n\n"
         echo -ne "Please consult the help menu.\n"
         exit;
      fi
   fi
fi


################
# Simplex data #
################

if [ ${data_type} = "simplex" ]
then
   # Quality-filtering reads

   echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;38;5;39mFiltering reads according quality parameters provided...\033[0m\n"

   mkdir HQ

   cat ${simplex_fastq} | NanoFilt \
     --length ${filt_min_length} \
     --maxlength ${filt_max_length} \
     --quality ${filt_min_quality} > HQ/HQ_simplex_seqs.fastq

   if [ -e "HQ/HQ_simplex_seqs.fastq" ]
   then
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;32mQuality filtering completed! \033[0m\n"
   else
      echo -ne "\n\033[31m\033[1mError: Quality-filtering failed. \033[0m\n\n"
      echo -ne "Please consult the help menu.\n"
      exit;
   fi

   if [ "$no_counting" != "yes" ]
   then
      # Counting simplex reads
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;38;5;39mCounting the number of high-quality simplex reads in the dataset...\033[0m\n"

      seqkit seq -n HQ/HQ_simplex_seqs.fastq | awk '{
         if (match($0, /[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}([;][0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?/)) {
            print substr($0, RSTART, RLENGTH)
         }
      }' | sort > HQ_simplex_read_ids_sorted.txt

      echo -e "Sample_name\tHQ_simplex_reads" > HQ_simplex_read_distribution.tsv

      parallel -j ${num_threads} '
         sort Rawseqids/rawseqids_{} | comm -12 - HQ_simplex_read_ids_sorted.txt | grep -v ";" | wc -l | \
         awk -v sample={} "{print sample\"\t\"\$1}"
      ' ::: $(ls ${fastq_folder} | sed 's/\.fastq$//') >> HQ_simplex_read_distribution.tsv

      rm HQ_simplex_read_ids_sorted.txt

      nhqsimplex=$(awk 'NR == 1 || (NR-1) % 4 == 0' HQ/HQ_simplex_seqs.fastq | wc -l)

      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;32mCounting completed! \033[0m\n\n"
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : There are ${nhqsimplex} high-quality simplex reads in the dataset. Here is their distribution in each sample:\n\n$(cat HQ_simplex_read_distribution.tsv)\n\nThese results have been saved as \e[34mHQ_simplex_read_distribution.tsv\e[0m\n\n"
   fi

   # Visualization of data quality

   if [ "$no_scatterplot" != "yes" ]
   then
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;38;5;39mCreating Length vs Quality scatter plots...\033[0m\n"

      if [ ${plot_format} = "png" ]
      then
         scaleq.py \
            --fastq HQ/HQ_simplex_seqs.fastq
         mv length_vs_quality_plot.png LengthvsQualityScatterPlot_HQ_simplex.png

      elif [ ${plot_format} = "html" ]
      then
         NanoPlot \
            -t ${num_threads} \
            --fastq HQ/HQ_simplex_seqs.fastq \
            -o NanoPlot_visualizations_HQ
         cp NanoPlot_visualizations_HQ/LengthvsQualityScatterPlot_dot.html LengthvsQualityScatterPlot_HQ_simplex.html
         rm -r NanoPlot_visualizations_HQ
      fi

      if [ -e "LengthvsQualityScatterPlot_HQ_simplex.${plot_format}" ]
      then
         echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;32mScatter plot saved as\033[0m \e[34mLengthvsQualityScatterPlot_HQ_simplex.${plot_format}\e[0m\n\n"
         echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : The next script of the pipeline to use is \033[1mproname_refine\033[0m.\n\n"
         echo -ne "\nUsage example:"
         echo -ne "\n-------------"
         echo
         echo "proname_refine \\"
         echo "  --clusterid 0.90 \\"
         echo "  --inputpath RawData \\"
         echo "  --medakamodel r1041_e82_400bps_sup_v4.2.0 \\"
         echo "  --chimeradb /opt/db/rEGEN-B/rEGEN-B_sequences.fasta \\"
         echo "  --qiime2import yes"
         echo
      else
         echo -ne "\n\033[31m\033[1mError: plotting failed. \033[0m\n\n"
         echo -ne "Please consult the help menu.\n"
         exit;
      fi
   fi
fi


#########################
# Simplex + Duplex data #
#########################

if [ ${data_type} = "both" ]
then
   # Quality-filtering reads

   echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;38;5;39mFiltering reads according quality parameters provided...\033[0m\n"

   mkdir HQ

   cat ${simplex_duplex_fastq} | NanoFilt \
     --length ${filt_min_length} \
     --maxlength ${filt_max_length} \
     --quality ${filt_min_quality} > HQ/HQ_simplex_duplex_seqs.fastq

   if [ -e "HQ/HQ_simplex_duplex_seqs.fastq" ]
   then
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;32mQuality filtering completed! \033[0m\n"
   else
      echo -ne "\n\033[31m\033[1mError: Quality-filtering failed. \033[0m\n\n"
      echo -ne "Please consult the help menu.\n"
      exit;
   fi

   # Separating duplex from simplex reads
   seqkit grep -j ${num_threads} -n -r -p ';' HQ/HQ_simplex_duplex_seqs.fastq -o HQ/HQ_duplex_seqs.fastq
   seqkit grep -j ${num_threads} -n -v -r -p ';' HQ/HQ_simplex_duplex_seqs.fastq -o HQ/HQ_simplex_seqs.fastq

   if [ "$no_counting" != "yes" ]
   then
      # Counting duplex and simplex reads
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;38;5;39mCounting the number of high-quality duplex and simplex reads in the dataset...\033[0m\n"

      seqkit seq -n HQ/HQ_simplex_seqs.fastq | awk '{
         if (match($0, /[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}([;][0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?/)) {
            print substr($0, RSTART, RLENGTH)
         }
      }' | sort > HQ_simplex_read_ids_sorted.txt

      seqkit seq -n HQ/HQ_duplex_seqs.fastq | awk '{
         if (match($0, /[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}([;][0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?/)) {
            print substr($0, RSTART, RLENGTH)
         }
      }' | sort > HQ_duplex_read_ids_sorted.txt

      echo -e "Sample_name\tHQ_simplex_reads\tHQ_duplex_reads" > HQ_simplex_duplex_read_distribution.tsv

      parallel -j ${num_threads} '
         simplex_count=$(sort Rawseqids/rawseqids_{} | comm -12 - HQ_simplex_read_ids_sorted.txt | grep -v ";" | wc -l)
         duplex_count=$(sort Rawseqids/rawseqids_{} | comm -12 - HQ_duplex_read_ids_sorted.txt | wc -l)
         echo -e "{}\t${simplex_count}\t${duplex_count}"
      ' ::: $(ls ${fastq_folder} | sed 's/\.fastq$//') >> HQ_simplex_duplex_read_distribution.tsv

      rm HQ_simplex_read_ids_sorted.txt
      rm HQ_duplex_read_ids_sorted.txt

      nhqsimplex=$(awk 'NR == 1 || (NR-1) % 4 == 0' HQ/HQ_simplex_seqs.fastq | wc -l)
      nhqduplex=$(awk 'NR == 1 || (NR-1) % 4 == 0' HQ/HQ_duplex_seqs.fastq | wc -l)

      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;32mCounting completed! \033[0m\n\n"
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : There are ${nhqsimplex} high-quality simplex reads and ${nhqduplex} high-quality duplex reads in the dataset. Here is their distribution in each sample:\n\n$(cat HQ_simplex_duplex_read_distribution.tsv)\n\nThese results have been saved as \e[34mHQ_simplex_duplex_read_distribution.tsv\e[0m\n\n"
   fi

   # Visualization of data quality

   if [ "$no_scatterplot" != "yes" ]
   then
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;38;5;39mCreating Length vs Quality scatter plots...\033[0m\n"

      if [ ${plot_format} = "png" ]
      then
         scaleq.py \
            --fastq HQ/HQ_simplex_duplex_seqs.fastq
         mv length_vs_quality_plot.png LengthvsQualityScatterPlot_HQ_simplex_duplex.png

      elif [ ${plot_format} = "html" ]
      then
         NanoPlot \
            -t ${num_threads} \
            --fastq HQ/HQ_simplex_duplex_seqs.fastq \
            -o NanoPlot_visualizations_HQ
         cp NanoPlot_visualizations_HQ/LengthvsQualityScatterPlot_dot.html LengthvsQualityScatterPlot_HQ_simplex_duplex.html
         rm -r NanoPlot_visualizations_HQ
      fi

      if [ -e "LengthvsQualityScatterPlot_HQ_simplex_duplex.${plot_format}" ]
      then
         echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;32mScatter plot saved as\033[0m \e[34mLengthvsQualityScatterPlot_HQ_simplex_duplex.${plot_format}\e[0m\n\n"
         echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : The next script of the pipeline to use is \033[1mproname_refine\033[0m.\n\n"
         echo -ne "\nUsage example:"
         echo -ne "\n-------------"
         echo
         echo "proname_refine \\"
         echo "  --clusterid 0.90 \\"
         echo "  --inputpath RawData \\"
         echo "  --medakamodel r1041_e82_400bps_sup_v5.2.0 \\"
         echo "  --chimeradb /opt/db/rEGEN-B/rEGEN-B_sequences.fasta \\"
         echo "  --qiime2import yes"
         echo
      else
         echo -ne "\n\033[31m\033[1mError: plotting failed. \033[0m\n\n"
         echo -ne "Please consult the help menu.\n"
         exit;
      fi
   fi
fi

if [ ${delete_non_essential} = "yes" ]
then
    rm reads_*.fastq
    rm simplex_duplex_read_distribution.tsv
    rm LengthvsQualityScatterPlot*
fi

unset data_type
unset filt_min_length
unset filt_max_length
unset filt_min_quality
unset fastq_folder
unset num_threads
unset duplex_fastq
unset simplex_fastq
unset simplex_duplex_fastq
unset delete_non_essential
unset no_scatterplot
unset no_counting
unset plot_format

