#!/bin/bash

echo -ne "\n**************************************************************************************************************\n"
echo -ne "* You are executing the \033[1mproname_import\033[0m script, which is the first part of the \033[1mPRONAME\033[0m pipeline.              *\n"
echo -ne "*                                                                                                            *\n"
echo -ne "* Please \033[31m\033[1mdo not\033[0m move, rename or remove files and folders generated by PRONAME until the end of the pipeline. *\n"
echo -ne "**************************************************************************************************************\n\n"

# Help menu

Help()
{

## Display Help
   echo -ne "\nThe proname_import script is the first part of the PRONAME pipeline and allows importing Nanopore metabarcoding data into the pipeline and initial processing. \nIt includes the trimming of adapter and primer sequences if asked by the user, the counting of simplex reads and duplex reads (if applicable), \nand the creation of Length vs Quality scatter plots."
   echo
   echo -ne "\nSyntax: proname_import [--inputpath|--threads|--duplex|--trimadapters|--sequencingkit|--trimprimers|--fwdprimer|--revprimer|--nocounting|--plotformat|--noscatterplot|--version|--verbose|--help]"
   echo
   echo "Options:"
   echo -ne "\t--inputpath\tPath to the folder containing raw fastq files. To prevent file conflicts and ensure accurate sequence counting, \n"
   echo -ne "\t\t\tyour raw FASTQ files must be stored in a separate directory (e.g., /data/RawData). Do not place them directly in your \n"
   echo -ne "\t\t\tworking directory, as this is where proname_import writes all its output files. Mixing input and output files in the \n"
   echo -ne "\t\t\tsame location can lead to errors and unreliable results.\n"
   echo
   echo -ne "\t--threads\tNumber of threads to use for the Guppy adapter-trimming step and/or the Cutadapt primmer-trimming step. \n"
   echo -ne "\t\t\tYou can know the number of available threads on your computer by running the command 'nproc --all' [Default: 2]\n"
   echo
   echo -ne "\t--duplex\tIndicate whether your sequencing data include duplex reads or not. Duplex reads are high-quality reads \n"
   echo -ne "\t\t\tthat were introduced with the kit 14 chemistry. [Options: \"yes\" or \"no\"]\n"
   echo
   echo -ne "\t--trimadapters\tIndicate whether your sequencing data contain adapters that should be trimmed. [Options: \"yes\" or \"no\"]\n"
   echo
   echo -ne "\t--sequencingkit\tName of the ONT sequencing kit used to generate the library(-ies). [Default: \"SQK-LSK114\"]\n"
   echo
   echo -ne "\t--trimprimers\tIndicate whether your sequencing data contain primers that should be trimmed. [Options: \"yes\" or \"no\"]\n"
   echo
   echo -ne "\t--fwdprimer\tThe sequence of the forward primer used during PCR to amplify DNA. If barcoded primers were used to \n"
   echo -ne "\t\t\tmultiplex samples, please provide here only the target-specific part of the primer in 5'->3' orientation. \n"
   echo -ne "\t\t\tThis argument is required if --trimprimers is set to \"yes\".\n"
   echo
   echo -ne "\t--revprimer\tThe sequence of the reverse primer used during PCR to amplify DNA. If barcoded primers were used to \n"
   echo -ne "\t\t\tmultiplex samples, please provide here only the target-specific part of the primer in 5'->3' orientation. \n"
   echo -ne "\t\t\tThis argument is required if --trimprimers is set to \"yes\".\n"
   echo
   echo -ne "\t--nocounting\tWhen this argument is set to \"yes\", counting of simplex/duplex reads is not performed. \n"
   echo -ne "\t\t\t[Options: \"yes\" or \"no\", Default: \"no\"]\n"
   echo
   echo -ne "\t--plotformat\tFormat of the scatterplot visualization files produced. It can be either \"png\" or \"html\".  \n"
   echo -ne "\t\t\tSince NanoPlot produces empty png plots for an unknown reason, it is only used to generate html visualizations. \n"
   echo -ne "\t\t\tpng plots are produced using the custom script scaleq.py. [Default: \"png\"] \n"
   echo
   echo -ne "\t--noscatterplot\tWhen this argument is set to \"yes\", no length vs. quality scatterplot is generated. Since this is a time-consuming step, \n"
   echo -ne "\t\t\tthis possiblity has been made available to increase the flexibility of the pipeline. However, it is strongly discouraged to skip \n"
   echo -ne "\t\t\tthis scatterplot generation. Visual inspection of these plots is crucial for deciding which type of read to work with \n"
   echo -ne "\t\t\t(duplex and/or simplex) and which length and quality thresholds to apply. [Options: \"yes\" or \"no\", Default: \"no\"]\n"
   echo
   echo -ne "\t--version\tPrint the version of the pipeline.\n"
   echo
   echo -ne "\t--verbose\tActivate verbose/debug mode (no redirections).\n"
   echo
   echo -ne "\t--help\t\tPrint this help."
   echo


## Usage example
   echo -ne "\nUsage example:"
   echo -ne "\n-------------"
   echo
   echo "proname_import \\"
   echo "  --inputpath RawData \\"
   echo "  --duplex yes \\"
   echo "  --trimadapters yes \\"
   echo "  --trimprimers yes \\"
   echo "  --fwdprimer AGRGTTYGATYMTGGCTCAG \\"
   echo "  --revprimer CGACATCGAGGTGCCAAAC"
   echo
}

Version()
{
    echo -ne "proname_import from the PRONAME pipeline, version 2.1.1\n\n"
}

# Variable default values
num_threads="2"
no_scatterplot="no"
no_counting="no"
sequencing_kit="SQK-LSK114"
plot_format="png"
verbose=false

# Transform long options to short ones

for arg in "$@"; do
  shift
  case "$arg" in
    '--help')            set -- "$@" '-h'   ;;
    '--version')         set -- "$@" '-v'   ;;
    '--inputpath')       set -- "$@" '-a'   ;;
    '--threads')         set -- "$@" '-b'   ;;
    '--duplex')          set -- "$@" '-c'   ;;
    '--trimadapters')    set -- "$@" '-d'   ;;
    '--trimprimers')     set -- "$@" '-e'   ;;
    '--fwdprimer')       set -- "$@" '-f'   ;;
    '--revprimer')       set -- "$@" '-g'   ;;
    '--noscatterplot')   set -- "$@" '-i'   ;;
    '--nocounting')      set -- "$@" '-j'   ;;
    '--sequencingkit')   set -- "$@" '-k'   ;;
    '--plotformat')      set -- "$@" '-l'   ;;
    '--verbose')         verbose=true ;;
    *)                   set -- "$@" "$arg" ;;
  esac
done


# Parse short options

while getopts :hva:b:c:d:e:f:g:i:j:k:l: flag
do
    case "${flag}" in
        h) Help
        exit;;
        v) Version
        exit;;
        a) fastq_folder=${OPTARG};;
        b) num_threads=${OPTARG};;
        c) duplex_data=${OPTARG};;
        d) adapter_trimming=${OPTARG};;
        e) primer_trimming=${OPTARG};;
        f) fwd_primer=${OPTARG};;
        g) rev_primer=${OPTARG};;
        i) no_scatterplot=${OPTARG};;
        j) no_counting=${OPTARG};;
        k) sequencing_kit=${OPTARG};;
        l) plot_format=${OPTARG};;
        \?) # Invalid option
                echo -ne "Error: Invalid option\n"
                echo -ne "Please consult the help menu with 'proname_import --help'\n"
                exit;;
    esac
done


# Mandatory arguments

if [ ! "$fastq_folder" ] || [ ! "$duplex_data" ] || [ ! "$adapter_trimming" ] || [ ! "$primer_trimming" ]; then
  echo -ne "\n\033[31m\033[1mError: arguments --inputpath, --duplex, --trimadapters and --trimprimers must be provided\033[0m\n\n"
  echo -ne "Please consult the help menu with 'proname_import --help'\n"
  exit;
fi

if [[ "$plot_format" != "png" && "$plot_format" != "html" ]]
then
   echo -ne "\n\033[31m\033[1mError: the value of the --plotformat argument must be 'png' or 'html'.\033[0m\n\n"
   echo -ne "Please consult the help menu with 'proname_import --help'\n"
   exit 1
fi


# Define exec_cmd function for conditional verbosity
exec_cmd() {
  if $verbose; then
    eval "$@"
  else
    eval "$@" >/dev/null 2>&1
  fi
}

######################################################


# Listing the sequence identifiers present in each fastq file

echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;38;5;39mRecording read distribution in each sample...\033[0m\n"

mkdir Rawseqids

for sample in $(ls ${fastq_folder} | awk -F '.fastq' '{print $1}')
do
   awk 'NR == 1 || (NR-1) % 4 == 0' ${fastq_folder}/${sample}.fastq | cut -d "@" -f 2 > Rawseqids/rawseqids_${sample}
done

echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;32mRead distribution recorded! \033[0m\n"


#######################################
# If adaptor trimming is not required #
#######################################

if [ ${adapter_trimming} = "no" ]
then
   # Concatenating fastq files
   echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;38;5;39mConcatenating fastq files...\033[0m\n"

   cat ${fastq_folder}/* > reads_simplex_duplex.fastq

   echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;32mConcatenating completed! \033[0m\n"
fi

###################################
# If adaptor trimming is required #
###################################

if [ ${adapter_trimming} = "yes" ]
then
   # Removing adapters

   echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;38;5;39mTrimming adapters from reads...\033[0m\n"

   mkdir Dorado_adapter_trimmed

   for i in $(ls ${fastq_folder})
   do
      dorado trim \
         --no-trim-primers \
         --emit-fastq \
         --threads ${num_threads} \
         --sequencing-kit ${sequencing_kit} \
         ${fastq_folder}/${i} > Dorado_adapter_trimmed/trimmed_${i}
   done

   cat Dorado_adapter_trimmed/*.fastq > reads_simplex_duplex.fastq
   rm -r Dorado_adapter_trimmed

   if [ -e "reads_simplex_duplex.fastq" ]
   then
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;32mAdapter trimming completed! \033[0m\n"
   else
      echo -ne "\n\033[31m\033[1mError: adapter trimming failed. \033[0m\n\n"
      echo -ne "Please consult the help menu.\n"
      exit;
   fi
fi

##################################
# If primer trimming is required #
##################################

if [ ${primer_trimming} = "yes" ]
then
   # Mandatory arguments

   if [ ! "$fwd_primer" ] || [ ! "$rev_primer" ]; then
      echo -ne "\n\033[31m\033[1mError: if primer trimming is required, arguments --fwprimer and --revprimer must be provided\033[0m\n\n"
      echo -ne "Please consult the help menu with 'proname_import --help'\n"
      exit;
   fi

   # Producing the reverse complement of the primers provided by the user
   RC_fwd_primer=$(echo -ne ">fwd_primer\n${fwd_primer}\n" | seqkit seq -r -p -t DNA 2>/dev/null | grep -v ">")
   RC_rev_primer=$(echo -ne ">rev_primer\n${rev_primer}\n" | seqkit seq -r -p -t DNA 2>/dev/null | grep -v ">")

   # Trimming primer sequences from reads
   echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;38;5;39mTrimming primers from reads...\033[0m\n"
   exec_cmd "cutadapt \
      reads_simplex_duplex.fastq \
      -g ${fwd_primer} \
      -a ${RC_rev_primer} \
      -e 0 \
      -n 2 \
      -j ${num_threads} \
      -o cutadapt_output_tmp.fastq"
   exec_cmd "cutadapt \
      cutadapt_output_tmp.fastq \
      -g ${rev_primer} \
      -a ${RC_fwd_primer} \
      -e 0 \
      -n 2 \
      -j ${num_threads} \
      -o cutadapt_output.fastq"
   exec_cmd "rm cutadapt_output_tmp.fastq"
   
   if [ -e "cutadapt_output.fastq" ]
   then
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;32mPrimer trimming completed! \033[0m\n"
   else
      echo -ne "\n\033[31m\033[1mError: primer trimming failed. \033[0m\n\n"
      echo -ne "Please consult the help menu.\n"
      exit;
   fi
   mv cutadapt_output.fastq reads_simplex_duplex.fastq
fi
##################################

if [ ${duplex_data} = "yes" ]
then
   # Separating duplex from simplex reads
   echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;38;5;39mSeparating duplex from simplex reads...\033[0m\n"

   seqkit grep -j ${num_threads} -n -r -p ';' reads_simplex_duplex.fastq -o reads_duplex.fastq
   seqkit grep -j ${num_threads} -n -v -r -p ';' reads_simplex_duplex.fastq -o reads_simplex.fastq

   echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;32mSeperation completed! \033[0m\n"

   if [ "$no_counting" != "yes" ]
   then
      # Counting duplex and simplex reads
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;38;5;39mCounting the number of duplex and simplex reads in the dataset...\033[0m\n"

      seqkit seq -n reads_simplex.fastq | sed 's/ .*//' | sort > simplex_read_ids_sorted.txt
      seqkit seq -n reads_duplex.fastq | sed 's/ .*//' | sort > duplex_read_ids_sorted.txt

      echo -e "Sample_name\tSimplex_reads\tDuplex_reads" > simplex_duplex_read_distribution.tsv

      parallel -j ${num_threads} '
         simplex_count=$(sort Rawseqids/rawseqids_{} | comm -12 - simplex_read_ids_sorted.txt | grep -v ";" | wc -l)
         duplex_count=$(sort Rawseqids/rawseqids_{} | comm -12 - duplex_read_ids_sorted.txt | wc -l)
         echo -e "{}\t${simplex_count}\t${duplex_count}"
      ' ::: $(ls ${fastq_folder} | sed 's/\.fastq$//') >> simplex_duplex_read_distribution.tsv

      rm simplex_read_ids_sorted.txt
      rm duplex_read_ids_sorted.txt

      nduplex=$(awk 'NR == 1 || (NR-1) % 4 == 0' reads_duplex.fastq | wc -l)
      nsimplex=$(awk 'NR == 1 || (NR-1) % 4 == 0' reads_simplex.fastq | wc -l)

      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;32mCounting completed! \033[0m\n\n"
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : There are ${nsimplex} simplex and ${nduplex} duplex reads in the dataset. Here is their distribution in each sample:\n\n$(cat simplex_duplex_read_distribution.tsv)\n\nThese results have been saved as \e[34msimplex_duplex_read_distribution.tsv\e[0m\n\n"
   fi
fi

if [ ${duplex_data} = "no" ]
then
   # Renaming file
   echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;38;5;39mRecording simplex reads...\033[0m\n"

   seqkit grep -j ${num_threads} -n -v -r -p ';' reads_simplex_duplex.fastq -o reads_simplex.fastq
   rm reads_simplex_duplex.fastq

   echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;32mRecording completed! \033[0m\n"

   if [ "$no_counting" != "yes" ]
   then
      # Counting simplex reads
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;38;5;39mCounting the number of simplex reads in the dataset...\033[0m\n"

      seqkit seq -n reads_simplex.fastq | sed 's/ .*//' | sort > simplex_read_ids_sorted.txt

      echo -e "Sample_name\tSimplex_reads" > simplex_read_distribution.tsv

      parallel -j ${num_threads} '
         sort Rawseqids/rawseqids_{} | comm -12 - simplex_read_ids_sorted.txt | grep -v ";" | wc -l | awk -v sample={} "{print sample\"\t\"\$1}"
      ' ::: $(ls ${fastq_folder} | sed 's/\.fastq$//') >> simplex_read_distribution.tsv

      rm simplex_read_ids_sorted.txt

      nsimplex=$(awk 'NR == 1 || (NR-1) % 4 == 0' reads_simplex.fastq | wc -l)
        
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;32mCounting completed! \033[0m\n\n"
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : There are ${nsimplex} simplex reads in the dataset. Here is their distribution in each sample:\n\n$(cat simplex_read_distribution.tsv)\n\nThese results have been saved as \e[34msimplex_read_distribution.tsv\e[0m\n\n"
   fi
fi

# Visualization of data quality

if [ "$no_scatterplot" != "yes" ]
then
   echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;38;5;39mCreating Length vs Quality scatter plots...\033[0m\n"


   if [ ${duplex_data} = "yes" ]
   then
      if [ ${plot_format} = "png" ]
      then
         scaleq.py \
            --fastq reads_simplex_duplex.fastq
         mv length_vs_quality_plot.png LengthvsQualityScatterPlot_simplex_duplex.png
         
         scaleq.py \
            --fastq reads_duplex.fastq
         mv length_vs_quality_plot.png LengthvsQualityScatterPlot_duplex.png

         scaleq.py \
            --fastq reads_simplex.fastq
         mv length_vs_quality_plot.png LengthvsQualityScatterPlot_simplex.png

      elif [ ${plot_format} = "html" ]
      then 
         NanoPlot \
          -t ${num_threads} \
          --fastq reads_simplex_duplex.fastq \
          -o NanoPlot_visualizations
         cp NanoPlot_visualizations/LengthvsQualityScatterPlot_dot.html LengthvsQualityScatterPlot_simplex_duplex.html
         rm -r NanoPlot_visualizations

         NanoPlot \
           -t ${num_threads} \
           --fastq reads_duplex.fastq \
           -o NanoPlot_visualizations_duplex
         cp NanoPlot_visualizations_duplex/LengthvsQualityScatterPlot_dot.html LengthvsQualityScatterPlot_duplex.html
         rm -r NanoPlot_visualizations_duplex

         NanoPlot \
           -t ${num_threads} \
           --fastq reads_simplex.fastq \
           -o NanoPlot_visualizations_simplex
         cp NanoPlot_visualizations_simplex/LengthvsQualityScatterPlot_dot.html LengthvsQualityScatterPlot_simplex.html
         rm -r NanoPlot_visualizations_simplex
      fi

      if [ -e "LengthvsQualityScatterPlot_simplex_duplex.${plot_format}" ] && [ -e "LengthvsQualityScatterPlot_duplex.${plot_format}" ] && [ -e "LengthvsQualityScatterPlot_simplex.${plot_format}" ]
      then
         echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;32mScatter plots saved as\033[0m \e[34mLengthvsQualityScatterPlot_simplex_duplex.${plot_format}\e[0m, \e[34mLengthvsQualityScatterPlot_duplex.${plot_format}\e[0m and \e[34mLengthvsQualityScatterPlot_simplex.${plot_format}\e[0m.\n"
         echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : You must now decide to carry on the analysis only with duplex reads (recommended if there are enough), only with simplex reads or with both.\n"
         echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : The next script of the pipeline to use is \033[1mproname_filter\033[0m.\n\n"
         echo -ne "\nUsage example:"
         echo -ne "\n-------------"
         echo
         echo "proname_filter \\"
         echo "  --datatype duplex \\"
         echo "  --filtminlen 3500 \\"
         echo "  --filtmaxlen 5000 \\"
         echo "  --filtminqual 15 \\"
         echo "  --inputpath RawData"
         echo
      else
         echo -ne "\n\033[31m\033[1mError: plotting failed. \033[0m\n\n"
         echo -ne "Please consult the help menu.\n"
         exit;
      fi
   fi

   if [ ${duplex_data} = "no" ]
   then
      if [ ${plot_format} = "png" ]
      then
         scaleq.py \
            --fastq reads_simplex.fastq
         mv length_vs_quality_plot.png LengthvsQualityScatterPlot_simplex.png

      elif [ ${plot_format} = "html" ]
      then
         NanoPlot \
            -t ${num_threads} \
            --fastq reads_simplex.fastq \
            -o NanoPlot_visualizations_simplex
         cp NanoPlot_visualizations_simplex/LengthvsQualityScatterPlot_dot.html LengthvsQualityScatterPlot_simplex.html
         rm -r NanoPlot_visualizations_simplex
      fi

      if [ -e "LengthvsQualityScatterPlot_simplex.${plot_format}" ]
      then
        echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;32mScatter plot saved as\033[0m \e[34mLengthvsQualityScatterPlot_simplex.${plot_format}\e[0m.\n"
        echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : The next script of the pipeline to use is \033[1mproname_filter\033[0m.\n\n"
        echo -ne "\nUsage example:"
        echo -ne "\n-------------"
        echo
        echo "proname_filter \\"
        echo "  --datatype simplex \\"
        echo "  --filtminlen 3500 \\"
        echo "  --filtmaxlen 5000 \\"
        echo "  --filtminqual 15 \\"
        echo "  --inputpath RawData"
        echo
      else
        echo -ne "\n\033[31m\033[1mError: plotting failed. \033[0m\n\n"
        echo -ne "Please consult the help menu.\n"
        exit;
      fi
   fi
fi

unset fastq_folder
unset num_threads
unset duplex_data
unset adapter_trimming
unset primer_trimming
unset fwd_primer
unset rev_primer
unset RC_fwd_primer
unset RC_rev_primer
unset no_scatterplot
unset no_counting
unset sequencing_kit
unset plot_format
unset verbose
